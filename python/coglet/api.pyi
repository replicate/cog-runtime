"""
This type stub file was generated by pyright.
"""

import pathlib
from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Any, AsyncIterator, Callable, Generic, Iterator, List, Optional, Type, TypeVar, Union, overload
from typing_extensions import ParamSpec

class Coder:
    _coders: set = ...
    @staticmethod
    def register(coder) -> None:
        ...
    
    @staticmethod
    def lookup(tpe: Type) -> Optional[Any]:
        ...
    
    @staticmethod
    @abstractmethod
    def factory(cls: Type) -> Optional[Any]:
        ...
    
    @abstractmethod
    def encode(self, x: Any) -> dict[str, Any]:
        ...
    
    @abstractmethod
    def decode(self, x: dict[str, Any]) -> Any:
        ...
    


class CancelationException(Exception):
    ...


class Path(pathlib.PosixPath):
    ...


@dataclass(frozen=True)
class Secret:
    secret_value: Optional[str] = ...
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def get_secret_value(self) -> Optional[str]:
        ...
    


_T_co = TypeVar('_T_co', covariant=True)
class ConcatenateIterator(Iterator[_T_co]):
    @abstractmethod
    def __next__(self) -> _T_co:
        ...
    


class AsyncConcatenateIterator(AsyncIterator[_T_co]):
    @abstractmethod
    async def __anext__(self) -> _T_co:
        ...
    


class Representation:
    """Base class for custom object representations, similar to Pydantic's approach."""
    def __repr__(self) -> str:
        """Generate a detailed string representation."""
        ...
    
    def __repr_str__(self, join_str: str) -> str:
        """Generate representation string for attributes."""
        ...
    
    def __repr_args__(self): # -> list[Any]:
        """Generate arguments for representation."""
        ...
    


@dataclass(frozen=True)
class FieldInfo(Representation):
    """Internal dataclass to hold Input metadata."""
    default: Any = ...
    description: Optional[str] = ...
    ge: Optional[Union[int, float]] = ...
    le: Optional[Union[int, float]] = ...
    min_length: Optional[int] = ...
    max_length: Optional[int] = ...
    regex: Optional[str] = ...
    choices: Optional[List[Union[str, int]]] = ...
    deprecated: Optional[bool] = ...
    def __repr_args__(self): # -> list[Any]:
        """Generate arguments for representation."""
        ...
    


_T = TypeVar('_T')
@overload
def Input() -> Any:
    """Create an input field with no constraints."""
    ...

@overload
def Input(*, description: Optional[str] = ..., ge: Optional[Union[int, float]] = ..., le: Optional[Union[int, float]] = ..., min_length: Optional[int] = ..., max_length: Optional[int] = ..., regex: Optional[str] = ..., choices: Optional[List[Union[str, int]]] = ..., deprecated: Optional[bool] = ...) -> Any:
    """Create an input field with keyword-only constraints."""
    ...

@overload
def Input(default: _T, *, description: Optional[str] = ..., ge: Optional[Union[int, float]] = ..., le: Optional[Union[int, float]] = ..., min_length: Optional[int] = ..., max_length: Optional[int] = ..., regex: Optional[str] = ..., choices: Optional[List[Union[str, int]]] = ..., deprecated: Optional[bool] = ...) -> _T:
    """Create an input field with default value and optional constraints."""
    ...

@overload
def Input(*, default_factory: Callable[[], Any], description: Optional[str] = ..., ge: Optional[Union[int, float]] = ..., le: Optional[Union[int, float]] = ..., min_length: Optional[int] = ..., max_length: Optional[int] = ..., regex: Optional[str] = ..., choices: Optional[List[Union[str, int]]] = ..., deprecated: Optional[bool] = ...) -> Any:
    """Create an input field with default_factory and optional constraints."""
    ...

def Input(default: Any = ..., *, default_factory: Optional[Callable[[], Any]] = ..., description: Optional[str] = ..., ge: Optional[Union[int, float]] = ..., le: Optional[Union[int, float]] = ..., min_length: Optional[int] = ..., max_length: Optional[int] = ..., regex: Optional[str] = ..., choices: Optional[List[Union[str, int]]] = ..., deprecated: Optional[bool] = ...) -> Any:
    """Create an input field specification.

    For type checkers, this returns Any to allow usage on type-annotated fields.
    At runtime, returns an FieldInfo instance with the field metadata.

    Args:
        default: Default value for the field
        description: Human-readable description
        ge: Minimum value (greater than or equal)
        le: Maximum value (less than or equal)
        min_length: Minimum length for strings/lists
        max_length: Maximum length for strings/lists
        regex: Regular expression pattern for strings
        choices: List of allowed values
        deprecated: Whether the field is deprecated

    Returns:
        FieldInfo instance containing the field metadata
    """
    ...

class BaseModel:
    def __init_subclass__(cls, *, auto_dataclass: bool = ..., init: bool = ..., **kwargs): # -> None:
        ...
    


P = ParamSpec('P')
R = TypeVar('R')
class BasePredictor(ABC, Generic[P, R]):
    def setup(self, weights: Optional[Union[Path, str]] = ...) -> None:
        ...
    
    @abstractmethod
    def predict(self, *args: P.args, **kwargs: P.kwargs) -> R:
        ...
    


class ExperimentalFeatureWarning(Warning):
    ...


