"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from coglet import api

class PrimitiveType(Enum):
    BOOL = ...
    FLOAT = ...
    INTEGER = ...
    STRING = ...
    PATH = ...
    SECRET = ...
    CUSTOM = ...
    @staticmethod
    def from_type(tpe: type) -> Any:
        ...
    
    def normalize(self, value: Any) -> Any:
        ...
    
    def python_type(self) -> str:
        ...
    
    def json_type(self) -> dict[str, Any]:
        ...
    
    def json_encode(self, value: Any) -> Any:
        ...
    


class Repetition(Enum):
    REQUIRED = ...
    OPTIONAL = ...
    REPEATED = ...


@dataclass(frozen=True)
class FieldType:
    primitive: PrimitiveType
    repetition: Repetition
    coder: Optional[api.Coder]
    @staticmethod
    def from_type(tpe: type): # -> FieldType:
        ...
    
    def normalize(self, value: Any) -> Any:
        ...
    
    def json_type(self) -> dict[str, Any]:
        ...
    
    def json_encode(self, value: Any) -> Any:
        ...
    
    def json_decode(self, value: Any) -> Any:
        ...
    
    def python_type(self) -> str:
        ...
    


@dataclass(frozen=True)
class Input:
    name: str
    order: int
    type: FieldType
    default: Any = ...
    description: Optional[str] = ...
    ge: Optional[Union[int, float]] = ...
    le: Optional[Union[int, float]] = ...
    min_length: Optional[int] = ...
    max_length: Optional[int] = ...
    regex: Optional[str] = ...
    choices: Optional[List[Union[str, int]]] = ...
    deprecated: Optional[bool] = ...


class Kind(Enum):
    SINGLE = ...
    LIST = ...
    ITERATOR = ...
    CONCAT_ITERATOR = ...
    OBJECT = ...


@dataclass(frozen=True)
class Output:
    kind: Kind
    type: Optional[PrimitiveType] = ...
    fields: Optional[Dict[str, FieldType]] = ...
    coder: Optional[api.Coder] = ...
    def json_type(self) -> dict[str, Any]:
        ...
    
    def normalize(self, value: Any) -> Any:
        ...
    
    def json_encode(self, value: Any) -> Any:
        ...
    


@dataclass(frozen=True)
class Predictor:
    module_name: str
    predictor_name: str
    inputs: Dict[str, Input]
    output: Output
    ...


